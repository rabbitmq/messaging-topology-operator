// Code generated by counterfeiter. DO NOT EDIT.
package internalfakes

import (
	"sync"

	"github.com/rabbitmq/messaging-topology-operator/internal"
)

type FakeSecretStoreClient struct {
	ReadCredentialsStub        func(string) (internal.CredentialsProvider, error)
	readCredentialsMutex       sync.RWMutex
	readCredentialsArgsForCall []struct {
		arg1 string
	}
	readCredentialsReturns struct {
		result1 internal.CredentialsProvider
		result2 error
	}
	readCredentialsReturnsOnCall map[int]struct {
		result1 internal.CredentialsProvider
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecretStoreClient) ReadCredentials(arg1 string) (internal.CredentialsProvider, error) {
	fake.readCredentialsMutex.Lock()
	ret, specificReturn := fake.readCredentialsReturnsOnCall[len(fake.readCredentialsArgsForCall)]
	fake.readCredentialsArgsForCall = append(fake.readCredentialsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ReadCredentialsStub
	fakeReturns := fake.readCredentialsReturns
	fake.recordInvocation("ReadCredentials", []interface{}{arg1})
	fake.readCredentialsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSecretStoreClient) ReadCredentialsCallCount() int {
	fake.readCredentialsMutex.RLock()
	defer fake.readCredentialsMutex.RUnlock()
	return len(fake.readCredentialsArgsForCall)
}

func (fake *FakeSecretStoreClient) ReadCredentialsCalls(stub func(string) (internal.CredentialsProvider, error)) {
	fake.readCredentialsMutex.Lock()
	defer fake.readCredentialsMutex.Unlock()
	fake.ReadCredentialsStub = stub
}

func (fake *FakeSecretStoreClient) ReadCredentialsArgsForCall(i int) string {
	fake.readCredentialsMutex.RLock()
	defer fake.readCredentialsMutex.RUnlock()
	argsForCall := fake.readCredentialsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSecretStoreClient) ReadCredentialsReturns(result1 internal.CredentialsProvider, result2 error) {
	fake.readCredentialsMutex.Lock()
	defer fake.readCredentialsMutex.Unlock()
	fake.ReadCredentialsStub = nil
	fake.readCredentialsReturns = struct {
		result1 internal.CredentialsProvider
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretStoreClient) ReadCredentialsReturnsOnCall(i int, result1 internal.CredentialsProvider, result2 error) {
	fake.readCredentialsMutex.Lock()
	defer fake.readCredentialsMutex.Unlock()
	fake.ReadCredentialsStub = nil
	if fake.readCredentialsReturnsOnCall == nil {
		fake.readCredentialsReturnsOnCall = make(map[int]struct {
			result1 internal.CredentialsProvider
			result2 error
		})
	}
	fake.readCredentialsReturnsOnCall[i] = struct {
		result1 internal.CredentialsProvider
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretStoreClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readCredentialsMutex.RLock()
	defer fake.readCredentialsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSecretStoreClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.SecretStoreClient = new(FakeSecretStoreClient)

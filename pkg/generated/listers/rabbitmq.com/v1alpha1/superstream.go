/*
RabbitMQ Messaging Topology Kubernetes Operator
Copyright 2021 VMware, Inc.

This product is licensed to you under the Mozilla Public License 2.0 license (the "License").  You may not use this product except in compliance with the Mozilla 2.0 License.

This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/rabbitmq/messaging-topology-operator/api/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SuperStreamLister helps list SuperStreams.
// All objects returned here must be treated as read-only.
type SuperStreamLister interface {
	// List lists all SuperStreams in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SuperStream, err error)
	// SuperStreams returns an object that can list and get SuperStreams.
	SuperStreams(namespace string) SuperStreamNamespaceLister
	SuperStreamListerExpansion
}

// superStreamLister implements the SuperStreamLister interface.
type superStreamLister struct {
	indexer cache.Indexer
}

// NewSuperStreamLister returns a new SuperStreamLister.
func NewSuperStreamLister(indexer cache.Indexer) SuperStreamLister {
	return &superStreamLister{indexer: indexer}
}

// List lists all SuperStreams in the indexer.
func (s *superStreamLister) List(selector labels.Selector) (ret []*v1alpha1.SuperStream, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SuperStream))
	})
	return ret, err
}

// SuperStreams returns an object that can list and get SuperStreams.
func (s *superStreamLister) SuperStreams(namespace string) SuperStreamNamespaceLister {
	return superStreamNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SuperStreamNamespaceLister helps list and get SuperStreams.
// All objects returned here must be treated as read-only.
type SuperStreamNamespaceLister interface {
	// List lists all SuperStreams in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SuperStream, err error)
	// Get retrieves the SuperStream from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SuperStream, error)
	SuperStreamNamespaceListerExpansion
}

// superStreamNamespaceLister implements the SuperStreamNamespaceLister
// interface.
type superStreamNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SuperStreams in the indexer for a given namespace.
func (s superStreamNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SuperStream, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SuperStream))
	})
	return ret, err
}

// Get retrieves the SuperStream from the indexer for a given namespace and name.
func (s superStreamNamespaceLister) Get(name string) (*v1alpha1.SuperStream, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("superstream"), name)
	}
	return obj.(*v1alpha1.SuperStream), nil
}

/*
RabbitMQ Messaging Topology Kubernetes Operator
Copyright 2021 VMware, Inc.
This product is licensed to you under the Mozilla Public License 2.0 license (the "License").  You may not use this product except in compliance with the Mozilla 2.0 License.
This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/rabbitmq/messaging-topology-operator/api/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BindingListLister helps list BindingLists.
// All objects returned here must be treated as read-only.
type BindingListLister interface {
	// List lists all BindingLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.BindingList, err error)
	// BindingLists returns an object that can list and get BindingLists.
	BindingLists(namespace string) BindingListNamespaceLister
	BindingListListerExpansion
}

// bindingListLister implements the BindingListLister interface.
type bindingListLister struct {
	indexer cache.Indexer
}

// NewBindingListLister returns a new BindingListLister.
func NewBindingListLister(indexer cache.Indexer) BindingListLister {
	return &bindingListLister{indexer: indexer}
}

// List lists all BindingLists in the indexer.
func (s *bindingListLister) List(selector labels.Selector) (ret []*v1alpha2.BindingList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.BindingList))
	})
	return ret, err
}

// BindingLists returns an object that can list and get BindingLists.
func (s *bindingListLister) BindingLists(namespace string) BindingListNamespaceLister {
	return bindingListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BindingListNamespaceLister helps list and get BindingLists.
// All objects returned here must be treated as read-only.
type BindingListNamespaceLister interface {
	// List lists all BindingLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.BindingList, err error)
	// Get retrieves the BindingList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.BindingList, error)
	BindingListNamespaceListerExpansion
}

// bindingListNamespaceLister implements the BindingListNamespaceLister
// interface.
type bindingListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BindingLists in the indexer for a given namespace.
func (s bindingListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.BindingList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.BindingList))
	})
	return ret, err
}

// Get retrieves the BindingList from the indexer for a given namespace and name.
func (s bindingListNamespaceLister) Get(name string) (*v1alpha2.BindingList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("bindinglist"), name)
	}
	return obj.(*v1alpha2.BindingList), nil
}

/*
RabbitMQ Messaging Topology Kubernetes Operator
Copyright 2021 VMware, Inc.

This product is licensed to you under the Mozilla Public License 2.0 license (the "License").  You may not use this product except in compliance with the Mozilla 2.0 License.

This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/rabbitmq/messaging-topology-operator/api/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// QueueLister helps list Queues.
// All objects returned here must be treated as read-only.
type QueueLister interface {
	// List lists all Queues in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.Queue, err error)
	// Queues returns an object that can list and get Queues.
	Queues(namespace string) QueueNamespaceLister
	QueueListerExpansion
}

// queueLister implements the QueueLister interface.
type queueLister struct {
	indexer cache.Indexer
}

// NewQueueLister returns a new QueueLister.
func NewQueueLister(indexer cache.Indexer) QueueLister {
	return &queueLister{indexer: indexer}
}

// List lists all Queues in the indexer.
func (s *queueLister) List(selector labels.Selector) (ret []*v1alpha2.Queue, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.Queue))
	})
	return ret, err
}

// Queues returns an object that can list and get Queues.
func (s *queueLister) Queues(namespace string) QueueNamespaceLister {
	return queueNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// QueueNamespaceLister helps list and get Queues.
// All objects returned here must be treated as read-only.
type QueueNamespaceLister interface {
	// List lists all Queues in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.Queue, err error)
	// Get retrieves the Queue from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.Queue, error)
	QueueNamespaceListerExpansion
}

// queueNamespaceLister implements the QueueNamespaceLister
// interface.
type queueNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Queues in the indexer for a given namespace.
func (s queueNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.Queue, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.Queue))
	})
	return ret, err
}

// Get retrieves the Queue from the indexer for a given namespace and name.
func (s queueNamespaceLister) Get(name string) (*v1alpha2.Queue, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("queue"), name)
	}
	return obj.(*v1alpha2.Queue), nil
}

/*
RabbitMQ Messaging Topology Kubernetes Operator
Copyright 2021 VMware, Inc.
This product is licensed to you under the Mozilla Public License 2.0 license (the "License").  You may not use this product except in compliance with the Mozilla 2.0 License.
This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/rabbitmq/messaging-topology-operator/api/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UserListLister helps list UserLists.
// All objects returned here must be treated as read-only.
type UserListLister interface {
	// List lists all UserLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.UserList, err error)
	// UserLists returns an object that can list and get UserLists.
	UserLists(namespace string) UserListNamespaceLister
	UserListListerExpansion
}

// userListLister implements the UserListLister interface.
type userListLister struct {
	indexer cache.Indexer
}

// NewUserListLister returns a new UserListLister.
func NewUserListLister(indexer cache.Indexer) UserListLister {
	return &userListLister{indexer: indexer}
}

// List lists all UserLists in the indexer.
func (s *userListLister) List(selector labels.Selector) (ret []*v1alpha2.UserList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.UserList))
	})
	return ret, err
}

// UserLists returns an object that can list and get UserLists.
func (s *userListLister) UserLists(namespace string) UserListNamespaceLister {
	return userListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UserListNamespaceLister helps list and get UserLists.
// All objects returned here must be treated as read-only.
type UserListNamespaceLister interface {
	// List lists all UserLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.UserList, err error)
	// Get retrieves the UserList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.UserList, error)
	UserListNamespaceListerExpansion
}

// userListNamespaceLister implements the UserListNamespaceLister
// interface.
type userListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UserLists in the indexer for a given namespace.
func (s userListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.UserList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.UserList))
	})
	return ret, err
}

// Get retrieves the UserList from the indexer for a given namespace and name.
func (s userListNamespaceLister) Get(name string) (*v1alpha2.UserList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("userlist"), name)
	}
	return obj.(*v1alpha2.UserList), nil
}

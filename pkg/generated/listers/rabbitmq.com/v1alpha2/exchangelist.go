/*
RabbitMQ Messaging Topology Kubernetes Operator
Copyright 2021 VMware, Inc.
This product is licensed to you under the Mozilla Public License 2.0 license (the "License").  You may not use this product except in compliance with the Mozilla 2.0 License.
This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/rabbitmq/messaging-topology-operator/api/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExchangeListLister helps list ExchangeLists.
// All objects returned here must be treated as read-only.
type ExchangeListLister interface {
	// List lists all ExchangeLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.ExchangeList, err error)
	// ExchangeLists returns an object that can list and get ExchangeLists.
	ExchangeLists(namespace string) ExchangeListNamespaceLister
	ExchangeListListerExpansion
}

// exchangeListLister implements the ExchangeListLister interface.
type exchangeListLister struct {
	indexer cache.Indexer
}

// NewExchangeListLister returns a new ExchangeListLister.
func NewExchangeListLister(indexer cache.Indexer) ExchangeListLister {
	return &exchangeListLister{indexer: indexer}
}

// List lists all ExchangeLists in the indexer.
func (s *exchangeListLister) List(selector labels.Selector) (ret []*v1alpha2.ExchangeList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.ExchangeList))
	})
	return ret, err
}

// ExchangeLists returns an object that can list and get ExchangeLists.
func (s *exchangeListLister) ExchangeLists(namespace string) ExchangeListNamespaceLister {
	return exchangeListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExchangeListNamespaceLister helps list and get ExchangeLists.
// All objects returned here must be treated as read-only.
type ExchangeListNamespaceLister interface {
	// List lists all ExchangeLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.ExchangeList, err error)
	// Get retrieves the ExchangeList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.ExchangeList, error)
	ExchangeListNamespaceListerExpansion
}

// exchangeListNamespaceLister implements the ExchangeListNamespaceLister
// interface.
type exchangeListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ExchangeLists in the indexer for a given namespace.
func (s exchangeListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.ExchangeList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.ExchangeList))
	})
	return ret, err
}

// Get retrieves the ExchangeList from the indexer for a given namespace and name.
func (s exchangeListNamespaceLister) Get(name string) (*v1alpha2.ExchangeList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("exchangelist"), name)
	}
	return obj.(*v1alpha2.ExchangeList), nil
}

/*
RabbitMQ Messaging Topology Kubernetes Operator
Copyright 2021 VMware, Inc.

This product is licensed to you under the Mozilla Public License 2.0 license (the "License").  You may not use this product except in compliance with the Mozilla 2.0 License.

This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/rabbitmq/messaging-topology-operator/api/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BindingLister helps list Bindings.
// All objects returned here must be treated as read-only.
type BindingLister interface {
	// List lists all Bindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.Binding, err error)
	// Bindings returns an object that can list and get Bindings.
	Bindings(namespace string) BindingNamespaceLister
	BindingListerExpansion
}

// bindingLister implements the BindingLister interface.
type bindingLister struct {
	indexer cache.Indexer
}

// NewBindingLister returns a new BindingLister.
func NewBindingLister(indexer cache.Indexer) BindingLister {
	return &bindingLister{indexer: indexer}
}

// List lists all Bindings in the indexer.
func (s *bindingLister) List(selector labels.Selector) (ret []*v1alpha2.Binding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.Binding))
	})
	return ret, err
}

// Bindings returns an object that can list and get Bindings.
func (s *bindingLister) Bindings(namespace string) BindingNamespaceLister {
	return bindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BindingNamespaceLister helps list and get Bindings.
// All objects returned here must be treated as read-only.
type BindingNamespaceLister interface {
	// List lists all Bindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.Binding, err error)
	// Get retrieves the Binding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.Binding, error)
	BindingNamespaceListerExpansion
}

// bindingNamespaceLister implements the BindingNamespaceLister
// interface.
type bindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Bindings in the indexer for a given namespace.
func (s bindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.Binding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.Binding))
	})
	return ret, err
}

// Get retrieves the Binding from the indexer for a given namespace and name.
func (s bindingNamespaceLister) Get(name string) (*v1alpha2.Binding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("binding"), name)
	}
	return obj.(*v1alpha2.Binding), nil
}

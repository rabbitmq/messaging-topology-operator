/*
RabbitMQ Messaging Topology Kubernetes Operator
Copyright 2021 VMware, Inc.
This product is licensed to you under the Mozilla Public License 2.0 license (the "License").  You may not use this product except in compliance with the Mozilla 2.0 License.
This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/rabbitmq/messaging-topology-operator/api/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PolicyListLister helps list PolicyLists.
// All objects returned here must be treated as read-only.
type PolicyListLister interface {
	// List lists all PolicyLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.PolicyList, err error)
	// PolicyLists returns an object that can list and get PolicyLists.
	PolicyLists(namespace string) PolicyListNamespaceLister
	PolicyListListerExpansion
}

// policyListLister implements the PolicyListLister interface.
type policyListLister struct {
	indexer cache.Indexer
}

// NewPolicyListLister returns a new PolicyListLister.
func NewPolicyListLister(indexer cache.Indexer) PolicyListLister {
	return &policyListLister{indexer: indexer}
}

// List lists all PolicyLists in the indexer.
func (s *policyListLister) List(selector labels.Selector) (ret []*v1alpha2.PolicyList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.PolicyList))
	})
	return ret, err
}

// PolicyLists returns an object that can list and get PolicyLists.
func (s *policyListLister) PolicyLists(namespace string) PolicyListNamespaceLister {
	return policyListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PolicyListNamespaceLister helps list and get PolicyLists.
// All objects returned here must be treated as read-only.
type PolicyListNamespaceLister interface {
	// List lists all PolicyLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.PolicyList, err error)
	// Get retrieves the PolicyList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.PolicyList, error)
	PolicyListNamespaceListerExpansion
}

// policyListNamespaceLister implements the PolicyListNamespaceLister
// interface.
type policyListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PolicyLists in the indexer for a given namespace.
func (s policyListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.PolicyList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.PolicyList))
	})
	return ret, err
}

// Get retrieves the PolicyList from the indexer for a given namespace and name.
func (s policyListNamespaceLister) Get(name string) (*v1alpha2.PolicyList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("policylist"), name)
	}
	return obj.(*v1alpha2.PolicyList), nil
}

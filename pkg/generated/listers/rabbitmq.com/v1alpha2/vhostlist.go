/*
RabbitMQ Messaging Topology Kubernetes Operator
Copyright 2021 VMware, Inc.
This product is licensed to you under the Mozilla Public License 2.0 license (the "License").  You may not use this product except in compliance with the Mozilla 2.0 License.
This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/rabbitmq/messaging-topology-operator/api/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VhostListLister helps list VhostLists.
// All objects returned here must be treated as read-only.
type VhostListLister interface {
	// List lists all VhostLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.VhostList, err error)
	// VhostLists returns an object that can list and get VhostLists.
	VhostLists(namespace string) VhostListNamespaceLister
	VhostListListerExpansion
}

// vhostListLister implements the VhostListLister interface.
type vhostListLister struct {
	indexer cache.Indexer
}

// NewVhostListLister returns a new VhostListLister.
func NewVhostListLister(indexer cache.Indexer) VhostListLister {
	return &vhostListLister{indexer: indexer}
}

// List lists all VhostLists in the indexer.
func (s *vhostListLister) List(selector labels.Selector) (ret []*v1alpha2.VhostList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.VhostList))
	})
	return ret, err
}

// VhostLists returns an object that can list and get VhostLists.
func (s *vhostListLister) VhostLists(namespace string) VhostListNamespaceLister {
	return vhostListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VhostListNamespaceLister helps list and get VhostLists.
// All objects returned here must be treated as read-only.
type VhostListNamespaceLister interface {
	// List lists all VhostLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.VhostList, err error)
	// Get retrieves the VhostList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.VhostList, error)
	VhostListNamespaceListerExpansion
}

// vhostListNamespaceLister implements the VhostListNamespaceLister
// interface.
type vhostListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VhostLists in the indexer for a given namespace.
func (s vhostListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.VhostList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.VhostList))
	})
	return ret, err
}

// Get retrieves the VhostList from the indexer for a given namespace and name.
func (s vhostListNamespaceLister) Get(name string) (*v1alpha2.VhostList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("vhostlist"), name)
	}
	return obj.(*v1alpha2.VhostList), nil
}

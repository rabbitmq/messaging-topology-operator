/*
RabbitMQ Messaging Topology Kubernetes Operator
Copyright 2021 VMware, Inc.
This product is licensed to you under the Mozilla Public License 2.0 license (the "License").  You may not use this product except in compliance with the Mozilla 2.0 License.
This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/rabbitmq/messaging-topology-operator/api/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// QueueListLister helps list QueueLists.
// All objects returned here must be treated as read-only.
type QueueListLister interface {
	// List lists all QueueLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.QueueList, err error)
	// QueueLists returns an object that can list and get QueueLists.
	QueueLists(namespace string) QueueListNamespaceLister
	QueueListListerExpansion
}

// queueListLister implements the QueueListLister interface.
type queueListLister struct {
	indexer cache.Indexer
}

// NewQueueListLister returns a new QueueListLister.
func NewQueueListLister(indexer cache.Indexer) QueueListLister {
	return &queueListLister{indexer: indexer}
}

// List lists all QueueLists in the indexer.
func (s *queueListLister) List(selector labels.Selector) (ret []*v1alpha2.QueueList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.QueueList))
	})
	return ret, err
}

// QueueLists returns an object that can list and get QueueLists.
func (s *queueListLister) QueueLists(namespace string) QueueListNamespaceLister {
	return queueListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// QueueListNamespaceLister helps list and get QueueLists.
// All objects returned here must be treated as read-only.
type QueueListNamespaceLister interface {
	// List lists all QueueLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.QueueList, err error)
	// Get retrieves the QueueList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.QueueList, error)
	QueueListNamespaceListerExpansion
}

// queueListNamespaceLister implements the QueueListNamespaceLister
// interface.
type queueListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all QueueLists in the indexer for a given namespace.
func (s queueListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.QueueList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.QueueList))
	})
	return ret, err
}

// Get retrieves the QueueList from the indexer for a given namespace and name.
func (s queueListNamespaceLister) Get(name string) (*v1alpha2.QueueList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("queuelist"), name)
	}
	return obj.(*v1alpha2.QueueList), nil
}

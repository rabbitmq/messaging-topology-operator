/*
RabbitMQ Messaging Topology Kubernetes Operator
Copyright 2021 VMware, Inc.

This product is licensed to you under the Mozilla Public License 2.0 license (the "License").  You may not use this product except in compliance with the Mozilla 2.0 License.

This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	rabbitmqv1alpha1 "github.com/rabbitmq/messaging-topology-operator/pkg/generated/clientset/versioned/typed/rabbitmq.com/v1alpha1"
	rabbitmqv1beta1 "github.com/rabbitmq/messaging-topology-operator/pkg/generated/clientset/versioned/typed/rabbitmq.com/v1beta1"
	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	RabbitmqV1alpha1() rabbitmqv1alpha1.RabbitmqV1alpha1Interface
	RabbitmqV1beta1() rabbitmqv1beta1.RabbitmqV1beta1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	rabbitmqV1alpha1 *rabbitmqv1alpha1.RabbitmqV1alpha1Client
	rabbitmqV1beta1  *rabbitmqv1beta1.RabbitmqV1beta1Client
}

// RabbitmqV1alpha1 retrieves the RabbitmqV1alpha1Client
func (c *Clientset) RabbitmqV1alpha1() rabbitmqv1alpha1.RabbitmqV1alpha1Interface {
	return c.rabbitmqV1alpha1
}

// RabbitmqV1beta1 retrieves the RabbitmqV1beta1Client
func (c *Clientset) RabbitmqV1beta1() rabbitmqv1beta1.RabbitmqV1beta1Interface {
	return c.rabbitmqV1beta1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.rabbitmqV1alpha1, err = rabbitmqv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.rabbitmqV1beta1, err = rabbitmqv1beta1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.rabbitmqV1alpha1 = rabbitmqv1alpha1.NewForConfigOrDie(c)
	cs.rabbitmqV1beta1 = rabbitmqv1beta1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.rabbitmqV1alpha1 = rabbitmqv1alpha1.New(c)
	cs.rabbitmqV1beta1 = rabbitmqv1beta1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}

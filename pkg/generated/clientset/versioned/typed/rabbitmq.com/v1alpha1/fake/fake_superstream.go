/*
RabbitMQ Messaging Topology Kubernetes Operator
Copyright 2021 VMware, Inc.

This product is licensed to you under the Mozilla Public License 2.0 license (the "License").  You may not use this product except in compliance with the Mozilla 2.0 License.

This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/rabbitmq/messaging-topology-operator/api/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSuperStreams implements SuperStreamInterface
type FakeSuperStreams struct {
	Fake *FakeRabbitmqV1alpha1
	ns   string
}

var superstreamsResource = schema.GroupVersionResource{Group: "rabbitmq.com", Version: "v1alpha1", Resource: "superstreams"}

var superstreamsKind = schema.GroupVersionKind{Group: "rabbitmq.com", Version: "v1alpha1", Kind: "SuperStream"}

// Get takes name of the superStream, and returns the corresponding superStream object, and an error if there is any.
func (c *FakeSuperStreams) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.SuperStream, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(superstreamsResource, c.ns, name), &v1alpha1.SuperStream{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SuperStream), err
}

// List takes label and field selectors, and returns the list of SuperStreams that match those selectors.
func (c *FakeSuperStreams) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.SuperStreamList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(superstreamsResource, superstreamsKind, c.ns, opts), &v1alpha1.SuperStreamList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.SuperStreamList{ListMeta: obj.(*v1alpha1.SuperStreamList).ListMeta}
	for _, item := range obj.(*v1alpha1.SuperStreamList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested superStreams.
func (c *FakeSuperStreams) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(superstreamsResource, c.ns, opts))

}

// Create takes the representation of a superStream and creates it.  Returns the server's representation of the superStream, and an error, if there is any.
func (c *FakeSuperStreams) Create(ctx context.Context, superStream *v1alpha1.SuperStream, opts v1.CreateOptions) (result *v1alpha1.SuperStream, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(superstreamsResource, c.ns, superStream), &v1alpha1.SuperStream{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SuperStream), err
}

// Update takes the representation of a superStream and updates it. Returns the server's representation of the superStream, and an error, if there is any.
func (c *FakeSuperStreams) Update(ctx context.Context, superStream *v1alpha1.SuperStream, opts v1.UpdateOptions) (result *v1alpha1.SuperStream, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(superstreamsResource, c.ns, superStream), &v1alpha1.SuperStream{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SuperStream), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeSuperStreams) UpdateStatus(ctx context.Context, superStream *v1alpha1.SuperStream, opts v1.UpdateOptions) (*v1alpha1.SuperStream, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(superstreamsResource, "status", c.ns, superStream), &v1alpha1.SuperStream{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SuperStream), err
}

// Delete takes name of the superStream and deletes it. Returns an error if one occurs.
func (c *FakeSuperStreams) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(superstreamsResource, c.ns, name), &v1alpha1.SuperStream{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSuperStreams) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(superstreamsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.SuperStreamList{})
	return err
}

// Patch applies the patch and returns the patched superStream.
func (c *FakeSuperStreams) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.SuperStream, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(superstreamsResource, c.ns, name, pt, data, subresources...), &v1alpha1.SuperStream{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SuperStream), err
}
